/**
 * Copyright (C) 2014 Consorzio Roma Ricerche
 * All rights reserved
 *
 * This file is part of the Protocol Adapter software, available at
 * https://github.com/theIoTLab/ProtocolAdapter .
 *
 * The Protocol Adapter is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see http://opensource.org/licenses/LGPL-3.0
 *
 * Contact Consorzio Roma Ricerche (protocoladapter@gmail.com)
 */

package eu.fistar.sdcs.pa.da.bthdp.hdpservice;

/**
 * This is the AIDL interface implemented by the client and used by the ISO 11073 Manager to
 * notify the client when one of the events of the HDP lifecycle happens
 *
 * @author Marcello Morena
 * @author Alexandru Serbanati
 */
interface HealthAgentAPI {

    /**
     * Called back by the ISO 11073 Manager when a device is connected. Create a new HDPDevice
     * and put it in the HashMap
     *
     * @param dev
     *      The String that identifies the device inside the ISO 11073 Manager
     *
     * @param addr
     *      The MAC address of the bluetooth device that has just connected
     */
	void Connected(String dev, String addr);

	/**
     * Called back by the ISO 11073 Manager when a device is associated
     *
     * @param dev
     *      The String that identifies the device inside the ISO 11073 Manager
     *
     * @param assocXmlData
     *      The raw XML data generated by the ISO 11073 Manager containing data from the device
     */
	void Associated(String dev, String xmldata);

	/**
     * Called back by the ISO 11073 Manager when the the measurement data is returned
     *
     * @param dev
     *      The String that identifies the device inside the ISO 11073 Manager
     *
     * @param measurementXmlData
     *      The raw XML data generated by the ISO 11073 Manager containing data from the device
     */
	void MeasurementData(String dev, String xmldata);

	/**
     * Called back by the ISO 11073 Manager when device attributes are received
     *
     * @param dev
     *      The String that identifies the device inside the ISO 11073 Manager
     *
     * @param attrXmlData
     *      The raw XML data generated by the ISO 11073 Manager containing data from the device
     */
	void DeviceAttributes(String dev, String xmldata);

	/**
     * Called back by the ISO 11073 Manager when a device is disassociated
     *
     * @param dev
     *      The String that identifies the device inside the ISO 11073 Manager
     */
	void Disassociated(String dev);

	/**
     * Called back by the ISO 11073 Manager when a device is disconnected
     *
     * @param dev
     *      The String that identifies the device inside the ISO 11073 Manage
     */
	void Disconnected(String dev);
}
